plugins {
    id 'java-library'
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'io.qameta.allure' version '2.12.0'
}

group = 'gmail.sandrounknown1991'
version = '1.0-SNAPSHOT'

def junitVersion = "5.11.3",
    selenideVersion = "7.7.0",
    lowerSelenideVersion = "6.13.0",
    restAssuredVersion = "5.5.0",
    allureVersion = "2.29.0",
    assertjVersion = "3.24.2",
    commonsioVersion = "2.14.0",
    jacksonVersion = "2.18.2",
    ownerVersion = "1.0.12",
    appiumVersion = "8.3.0"


repositories {
    mavenCentral()
}

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

configurations {
    withoutAppiumTests {
        extendsFrom testImplementation
    }
    withAppiumTests {
        extendsFrom testImplementation
    }
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.codeborne:selenide:$lowerSelenideVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "commons-io:commons-io:$commonsioVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "io.appium:java-client:$appiumVersion"
    )

    withoutAppiumTests(  // раскоментил
            "com.codeborne:selenide:$selenideVersion"
    )

    withAppiumTests(
            "io.appium:java-client:$appiumVersion"
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task api(type: Test) {
    useJUnitPlatform {
        //includeTags("API")
        includeTags("API_FOR_TEST")
    }

    // добавил
    testClassesDirs = sourceSets.test.output
    classpath = configurations.withoutAppiumTests + sourceSets.test.output
}

task web(type: Test) {
    useJUnitPlatform {
        //includeTags("WEB")
        includeTags("WEB_FOR_TEST")
    }

    // добавил
    testClassesDirs = sourceSets.test.output
    classpath = configurations.withoutAppiumTests + sourceSets.test.output
}

task mobile_android(type: Test) {
    useJUnitPlatform {
        //includeTags("ANDROID")
        includeTags("MOBILE_FOR_TEST")
    }

    testClassesDirs = sourceSets.test.output
    classpath = configurations.withAppiumTests + sourceSets.test.output
}